/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import { relations } from '@payloadcms/db-vercel-postgres/drizzle';
import {
  boolean,
  foreignKey,
  index,
  integer,
  jsonb,
  numeric,
  pgEnum,
  pgTable,
  serial,
  text,
  timestamp,
  uniqueIndex,
  varchar,
} from '@payloadcms/db-vercel-postgres/drizzle/pg-core';
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
);
export const enum_pages_blocks_stack_direction = pgEnum(
  'enum_pages_blocks_stack_direction',
  ['vertical', 'horizontal'],
);
export const enum_pages_status = pgEnum('enum_pages_status', [
  'draft',
  'published',
]);
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
);
export const enum__pages_v_blocks_stack_direction = pgEnum(
  'enum__pages_v_blocks_stack_direction',
  ['vertical', 'horizontal'],
);
export const enum__pages_v_version_status = pgEnum(
  'enum__pages_v_version_status',
  ['draft', 'published'],
);
export const enum_registry_item_status = pgEnum('enum_registry_item_status', [
  'draft',
  'published',
]);
export const enum__registry_item_v_version_status = pgEnum(
  'enum__registry_item_v_version_status',
  ['draft', 'published'],
);
export const enum_registry_purchase_purchased_at = pgEnum(
  'enum_registry_purchase_purchased_at',
  ['online', 'in-store'],
);

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
);

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
);

export const pages_blocks_accordion_items = pgTable(
  'pages_blocks_accordion_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_accordion_items_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('pages_blocks_accordion_items_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_accordion.id],
      name: 'pages_blocks_accordion_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_accordion = pgTable(
  'pages_blocks_accordion',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_accordion_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_accordion_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_accordion_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_accordion_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_card = pgTable(
  'pages_blocks_card',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_card_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_card_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_card_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_card_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('full'),
    richText: jsonb('rich_text'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    separator: boolean('separator').default(false),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_place = pgTable(
  'pages_blocks_place',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: jsonb('description'),
    url: varchar('url'),
    location: varchar('location'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_place_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_place_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_place_path_idx').on(columns._path),
    pages_blocks_place_image_idx: index('pages_blocks_place_image_idx').on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_place_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_registry = pgTable(
  'pages_blocks_registry',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_registry_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_registry_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_registry_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_registry_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_schedule_events = pgTable(
  'pages_blocks_schedule_events',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
    date: timestamp('date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).default('Sat Sep 06 2025 00:00:00 GMT-0500 (Central Daylight Time'),
    time: varchar('time'),
    description: jsonb('description'),
    location: varchar('location'),
    attire: varchar('attire'),
    draft: boolean('draft').default(false),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_schedule_events_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('pages_blocks_schedule_events_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_schedule.id],
      name: 'pages_blocks_schedule_events_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_schedule = pgTable(
  'pages_blocks_schedule',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_schedule_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_schedule_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_schedule_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_schedule_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_stack = pgTable(
  'pages_blocks_stack',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    direction:
      enum_pages_blocks_stack_direction('direction').default('vertical'),
    wrap: boolean('wrap').default(false),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_stack_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_stack_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_stack_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_stack_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages_blocks_things_to_do = pgTable(
  'pages_blocks_things_to_do',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_things_to_do_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_things_to_do_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('pages_blocks_things_to_do_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_things_to_do_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    slug: varchar('slug'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
);

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'place-tagID': integer('place_tag_id'),
    'things-to-do-categoryID': integer('things_to_do_category_id'),
    'things-to-doID': integer('things_to_do_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_place_tag_id_idx: index('pages_rels_place_tag_id_idx').on(
      columns['place-tagID'],
    ),
    pages_rels_things_to_do_category_id_idx: index(
      'pages_rels_things_to_do_category_id_idx',
    ).on(columns['things-to-do-categoryID']),
    pages_rels_things_to_do_id_idx: index('pages_rels_things_to_do_id_idx').on(
      columns['things-to-doID'],
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    'place-tagIdFk': foreignKey({
      columns: [columns['place-tagID']],
      foreignColumns: [place_tag.id],
      name: 'pages_rels_place_tag_fk',
    }).onDelete('cascade'),
    'things-to-do-categoryIdFk': foreignKey({
      columns: [columns['things-to-do-categoryID']],
      foreignColumns: [things_to_do_category.id],
      name: 'pages_rels_things_to_do_category_fk',
    }).onDelete('cascade'),
    'things-to-doIdFk': foreignKey({
      columns: [columns['things-to-doID']],
      foreignColumns: [things_to_do.id],
      name: 'pages_rels_things_to_do_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_accordion_items = pgTable(
  '_pages_v_blocks_accordion_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    content: jsonb('content'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_accordion_items_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_accordion_items_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_accordion.id],
      name: '_pages_v_blocks_accordion_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_accordion = pgTable(
  '_pages_v_blocks_accordion',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_accordion_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_accordion_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_accordion_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_accordion_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_card = pgTable(
  '_pages_v_blocks_card',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_card_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_card_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_card_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_card_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('full'),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    separator: boolean('separator').default(false),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_place = pgTable(
  '_pages_v_blocks_place',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    description: jsonb('description'),
    url: varchar('url'),
    location: varchar('location'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_place_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_place_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_place_path_idx').on(columns._path),
    _pages_v_blocks_place_image_idx: index(
      '_pages_v_blocks_place_image_idx',
    ).on(columns.image),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_place_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_registry = pgTable(
  '_pages_v_blocks_registry',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_registry_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_registry_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_registry_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_registry_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_schedule_events = pgTable(
  '_pages_v_blocks_schedule_events',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    title: varchar('title'),
    date: timestamp('date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).default('Sat Sep 06 2025 00:00:00 GMT-0500 (Central Daylight Time)'),
    time: varchar('time'),
    description: jsonb('description'),
    location: varchar('location'),
    attire: varchar('attire'),
    draft: boolean('draft').default(false),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_schedule_events_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_schedule_events_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_schedule.id],
      name: '_pages_v_blocks_schedule_events_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_schedule = pgTable(
  '_pages_v_blocks_schedule',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_schedule_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_schedule_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_schedule_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_schedule_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_stack = pgTable(
  '_pages_v_blocks_stack',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    direction:
      enum__pages_v_blocks_stack_direction('direction').default('vertical'),
    wrap: boolean('wrap').default(false),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_stack_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_stack_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_stack_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_stack_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v_blocks_things_to_do = pgTable(
  '_pages_v_blocks_things_to_do',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_things_to_do_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_things_to_do_parent_id_idx').on(
      columns._parentID,
    ),
    _pathIdx: index('_pages_v_blocks_things_to_do_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_things_to_do_parent_id_fk',
    }).onDelete('cascade'),
  }),
);

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_slug: varchar('version_slug'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_version_slug_idx: index(
      '_pages_v_version_version_slug_idx',
    ).on(columns.version_slug),
    _pages_v_version_version_updated_at_idx: index(
      '_pages_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _pages_v_version_version_created_at_idx: index(
      '_pages_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _pages_v_version_version__status_idx: index(
      '_pages_v_version_version__status_idx',
    ).on(columns.version__status),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(
      columns.createdAt,
    ),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(
      columns.updatedAt,
    ),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
);

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'place-tagID': integer('place_tag_id'),
    'things-to-do-categoryID': integer('things_to_do_category_id'),
    'things-to-doID': integer('things_to_do_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_place_tag_id_idx: index('_pages_v_rels_place_tag_id_idx').on(
      columns['place-tagID'],
    ),
    _pages_v_rels_things_to_do_category_id_idx: index(
      '_pages_v_rels_things_to_do_category_id_idx',
    ).on(columns['things-to-do-categoryID']),
    _pages_v_rels_things_to_do_id_idx: index(
      '_pages_v_rels_things_to_do_id_idx',
    ).on(columns['things-to-doID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    'place-tagIdFk': foreignKey({
      columns: [columns['place-tagID']],
      foreignColumns: [place_tag.id],
      name: '_pages_v_rels_place_tag_fk',
    }).onDelete('cascade'),
    'things-to-do-categoryIdFk': foreignKey({
      columns: [columns['things-to-do-categoryID']],
      foreignColumns: [things_to_do_category.id],
      name: '_pages_v_rels_things_to_do_category_fk',
    }).onDelete('cascade'),
    'things-to-doIdFk': foreignKey({
      columns: [columns['things-to-doID']],
      foreignColumns: [things_to_do.id],
      name: '_pages_v_rels_things_to_do_fk',
    }).onDelete('cascade'),
  }),
);

export const place_tag = pgTable(
  'place_tag',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull(),
    slug: varchar('slug').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    place_tag_slug_idx: index('place_tag_slug_idx').on(columns.slug),
    place_tag_updated_at_idx: index('place_tag_updated_at_idx').on(
      columns.updatedAt,
    ),
    place_tag_created_at_idx: index('place_tag_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const registry_category = pgTable(
  'registry_category',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull(),
    slug: varchar('slug').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    registry_category_slug_idx: index('registry_category_slug_idx').on(
      columns.slug,
    ),
    registry_category_updated_at_idx: index(
      'registry_category_updated_at_idx',
    ).on(columns.updatedAt),
    registry_category_created_at_idx: index(
      'registry_category_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const registry_item = pgTable(
  'registry_item',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: jsonb('description'),
    store: integer('store_id').references(() => registry_store.id, {
      onDelete: 'set null',
    }),
    price: numeric('price'),
    url: varchar('url'),
    quantityRequested: numeric('quantity_requested'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_registry_item_status('_status').default('draft'),
  },
  (columns) => ({
    registry_item_store_idx: index('registry_item_store_idx').on(columns.store),
    registry_item_image_idx: index('registry_item_image_idx').on(columns.image),
    registry_item_updated_at_idx: index('registry_item_updated_at_idx').on(
      columns.updatedAt,
    ),
    registry_item_created_at_idx: index('registry_item_created_at_idx').on(
      columns.createdAt,
    ),
    registry_item__status_idx: index('registry_item__status_idx').on(
      columns._status,
    ),
  }),
);

export const registry_item_rels = pgTable(
  'registry_item_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'registry-categoryID': integer('registry_category_id'),
  },
  (columns) => ({
    order: index('registry_item_rels_order_idx').on(columns.order),
    parentIdx: index('registry_item_rels_parent_idx').on(columns.parent),
    pathIdx: index('registry_item_rels_path_idx').on(columns.path),
    registry_item_rels_registry_category_id_idx: index(
      'registry_item_rels_registry_category_id_idx',
    ).on(columns['registry-categoryID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [registry_item.id],
      name: 'registry_item_rels_parent_fk',
    }).onDelete('cascade'),
    'registry-categoryIdFk': foreignKey({
      columns: [columns['registry-categoryID']],
      foreignColumns: [registry_category.id],
      name: 'registry_item_rels_registry_category_fk',
    }).onDelete('cascade'),
  }),
);

export const _registry_item_v = pgTable(
  '_registry_item_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => registry_item.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_description: jsonb('version_description'),
    version_store: integer('version_store_id').references(
      () => registry_store.id,
      {
        onDelete: 'set null',
      },
    ),
    version_price: numeric('version_price'),
    version_url: varchar('version_url'),
    version_quantityRequested: numeric('version_quantity_requested'),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__registry_item_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _registry_item_v_parent_idx: index('_registry_item_v_parent_idx').on(
      columns.parent,
    ),
    _registry_item_v_version_version_store_idx: index(
      '_registry_item_v_version_version_store_idx',
    ).on(columns.version_store),
    _registry_item_v_version_version_image_idx: index(
      '_registry_item_v_version_version_image_idx',
    ).on(columns.version_image),
    _registry_item_v_version_version_updated_at_idx: index(
      '_registry_item_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _registry_item_v_version_version_created_at_idx: index(
      '_registry_item_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _registry_item_v_version_version__status_idx: index(
      '_registry_item_v_version_version__status_idx',
    ).on(columns.version__status),
    _registry_item_v_created_at_idx: index(
      '_registry_item_v_created_at_idx',
    ).on(columns.createdAt),
    _registry_item_v_updated_at_idx: index(
      '_registry_item_v_updated_at_idx',
    ).on(columns.updatedAt),
    _registry_item_v_latest_idx: index('_registry_item_v_latest_idx').on(
      columns.latest,
    ),
    _registry_item_v_autosave_idx: index('_registry_item_v_autosave_idx').on(
      columns.autosave,
    ),
  }),
);

export const _registry_item_v_rels = pgTable(
  '_registry_item_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'registry-categoryID': integer('registry_category_id'),
  },
  (columns) => ({
    order: index('_registry_item_v_rels_order_idx').on(columns.order),
    parentIdx: index('_registry_item_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_registry_item_v_rels_path_idx').on(columns.path),
    _registry_item_v_rels_registry_category_id_idx: index(
      '_registry_item_v_rels_registry_category_id_idx',
    ).on(columns['registry-categoryID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_registry_item_v.id],
      name: '_registry_item_v_rels_parent_fk',
    }).onDelete('cascade'),
    'registry-categoryIdFk': foreignKey({
      columns: [columns['registry-categoryID']],
      foreignColumns: [registry_category.id],
      name: '_registry_item_v_rels_registry_category_fk',
    }).onDelete('cascade'),
  }),
);

export const registry_purchase = pgTable(
  'registry_purchase',
  {
    id: serial('id').primaryKey(),
    registryItem: integer('registry_item_id')
      .notNull()
      .references(() => registry_item.id, {
        onDelete: 'set null',
      }),
    quantity: numeric('quantity').notNull(),
    purchasedAt: enum_registry_purchase_purchased_at('purchased_at').notNull(),
    orderNumber: varchar('order_number'),
    purchaserFirstName: varchar('purchaser_first_name').notNull(),
    purchaserLastName: varchar('purchaser_last_name').notNull(),
    purchaserEmail: varchar('purchaser_email').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    registry_purchase_registry_item_idx: index(
      'registry_purchase_registry_item_idx',
    ).on(columns.registryItem),
    registry_purchase_updated_at_idx: index(
      'registry_purchase_updated_at_idx',
    ).on(columns.updatedAt),
    registry_purchase_created_at_idx: index(
      'registry_purchase_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const registry_store = pgTable(
  'registry_store',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull(),
    slug: varchar('slug').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    registry_store_slug_idx: index('registry_store_slug_idx').on(columns.slug),
    registry_store_updated_at_idx: index('registry_store_updated_at_idx').on(
      columns.updatedAt,
    ),
    registry_store_created_at_idx: index('registry_store_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const things_to_do = pgTable(
  'things_to_do',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description').notNull(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    things_to_do_image_idx: index('things_to_do_image_idx').on(columns.image),
    things_to_do_updated_at_idx: index('things_to_do_updated_at_idx').on(
      columns.updatedAt,
    ),
    things_to_do_created_at_idx: index('things_to_do_created_at_idx').on(
      columns.createdAt,
    ),
  }),
);

export const things_to_do_rels = pgTable(
  'things_to_do_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    'things-to-do-categoryID': integer('things_to_do_category_id'),
  },
  (columns) => ({
    order: index('things_to_do_rels_order_idx').on(columns.order),
    parentIdx: index('things_to_do_rels_parent_idx').on(columns.parent),
    pathIdx: index('things_to_do_rels_path_idx').on(columns.path),
    things_to_do_rels_things_to_do_category_id_idx: index(
      'things_to_do_rels_things_to_do_category_id_idx',
    ).on(columns['things-to-do-categoryID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [things_to_do.id],
      name: 'things_to_do_rels_parent_fk',
    }).onDelete('cascade'),
    'things-to-do-categoryIdFk': foreignKey({
      columns: [columns['things-to-do-categoryID']],
      foreignColumns: [things_to_do_category.id],
      name: 'things_to_do_rels_things_to_do_category_fk',
    }).onDelete('cascade'),
  }),
);

export const things_to_do_category = pgTable(
  'things_to_do_category',
  {
    id: serial('id').primaryKey(),
    label: varchar('label').notNull(),
    slug: varchar('slug').notNull(),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    things_to_do_category_slug_idx: index('things_to_do_category_slug_idx').on(
      columns.slug,
    ),
    things_to_do_category_updated_at_idx: index(
      'things_to_do_category_updated_at_idx',
    ).on(columns.updatedAt),
    things_to_do_category_created_at_idx: index(
      'things_to_do_category_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      'payload_locked_documents_global_slug_idx',
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      'payload_locked_documents_updated_at_idx',
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      'payload_locked_documents_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    pagesID: integer('pages_id'),
    'place-tagID': integer('place_tag_id'),
    'registry-categoryID': integer('registry_category_id'),
    'registry-itemID': integer('registry_item_id'),
    'registry-purchaseID': integer('registry_purchase_id'),
    'registry-storeID': integer('registry_store_id'),
    'things-to-doID': integer('things_to_do_id'),
    'things-to-do-categoryID': integer('things_to_do_category_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(
      columns.parent,
    ),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_place_tag_id_idx: index(
      'payload_locked_documents_rels_place_tag_id_idx',
    ).on(columns['place-tagID']),
    payload_locked_documents_rels_registry_category_id_idx: index(
      'payload_locked_documents_rels_registry_category_id_idx',
    ).on(columns['registry-categoryID']),
    payload_locked_documents_rels_registry_item_id_idx: index(
      'payload_locked_documents_rels_registry_item_id_idx',
    ).on(columns['registry-itemID']),
    payload_locked_documents_rels_registry_purchase_id_idx: index(
      'payload_locked_documents_rels_registry_purchase_id_idx',
    ).on(columns['registry-purchaseID']),
    payload_locked_documents_rels_registry_store_id_idx: index(
      'payload_locked_documents_rels_registry_store_id_idx',
    ).on(columns['registry-storeID']),
    payload_locked_documents_rels_things_to_do_id_idx: index(
      'payload_locked_documents_rels_things_to_do_id_idx',
    ).on(columns['things-to-doID']),
    payload_locked_documents_rels_things_to_do_category_id_idx: index(
      'payload_locked_documents_rels_things_to_do_category_id_idx',
    ).on(columns['things-to-do-categoryID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    'place-tagIdFk': foreignKey({
      columns: [columns['place-tagID']],
      foreignColumns: [place_tag.id],
      name: 'payload_locked_documents_rels_place_tag_fk',
    }).onDelete('cascade'),
    'registry-categoryIdFk': foreignKey({
      columns: [columns['registry-categoryID']],
      foreignColumns: [registry_category.id],
      name: 'payload_locked_documents_rels_registry_category_fk',
    }).onDelete('cascade'),
    'registry-itemIdFk': foreignKey({
      columns: [columns['registry-itemID']],
      foreignColumns: [registry_item.id],
      name: 'payload_locked_documents_rels_registry_item_fk',
    }).onDelete('cascade'),
    'registry-purchaseIdFk': foreignKey({
      columns: [columns['registry-purchaseID']],
      foreignColumns: [registry_purchase.id],
      name: 'payload_locked_documents_rels_registry_purchase_fk',
    }).onDelete('cascade'),
    'registry-storeIdFk': foreignKey({
      columns: [columns['registry-storeID']],
      foreignColumns: [registry_store.id],
      name: 'payload_locked_documents_rels_registry_store_fk',
    }).onDelete('cascade'),
    'things-to-doIdFk': foreignKey({
      columns: [columns['things-to-doID']],
      foreignColumns: [things_to_do.id],
      name: 'payload_locked_documents_rels_things_to_do_fk',
    }).onDelete('cascade'),
    'things-to-do-categoryIdFk': foreignKey({
      columns: [columns['things-to-do-categoryID']],
      foreignColumns: [things_to_do_category.id],
      name: 'payload_locked_documents_rels_things_to_do_category_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      'payload_preferences_updated_at_idx',
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      'payload_preferences_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      'payload_preferences_rels_users_id_idx',
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
);

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      'payload_migrations_updated_at_idx',
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      'payload_migrations_created_at_idx',
    ).on(columns.createdAt),
  }),
);

export const relations_users = relations(users, () => ({}));
export const relations_media = relations(media, () => ({}));
export const relations_pages_blocks_accordion_items = relations(
  pages_blocks_accordion_items,
  ({ one }) => ({
    _parentID: one(pages_blocks_accordion, {
      fields: [pages_blocks_accordion_items._parentID],
      references: [pages_blocks_accordion.id],
      relationName: 'items',
    }),
  }),
);
export const relations_pages_blocks_accordion = relations(
  pages_blocks_accordion,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_accordion._parentID],
      references: [pages.id],
      relationName: '_blocks_accordion',
    }),
    items: many(pages_blocks_accordion_items, {
      relationName: 'items',
    }),
  }),
);
export const relations_pages_blocks_card = relations(
  pages_blocks_card,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_card._parentID],
      references: [pages.id],
      relationName: '_blocks_card',
    }),
  }),
);
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
);
export const relations_pages_blocks_content = relations(
  pages_blocks_content,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_content._parentID],
      references: [pages.id],
      relationName: '_blocks_content',
    }),
    columns: many(pages_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
);
export const relations_pages_blocks_place = relations(
  pages_blocks_place,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_place._parentID],
      references: [pages.id],
      relationName: '_blocks_place',
    }),
    image: one(media, {
      fields: [pages_blocks_place.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
);
export const relations_pages_blocks_registry = relations(
  pages_blocks_registry,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_registry._parentID],
      references: [pages.id],
      relationName: '_blocks_registry',
    }),
  }),
);
export const relations_pages_blocks_schedule_events = relations(
  pages_blocks_schedule_events,
  ({ one }) => ({
    _parentID: one(pages_blocks_schedule, {
      fields: [pages_blocks_schedule_events._parentID],
      references: [pages_blocks_schedule.id],
      relationName: 'events',
    }),
  }),
);
export const relations_pages_blocks_schedule = relations(
  pages_blocks_schedule,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_schedule._parentID],
      references: [pages.id],
      relationName: '_blocks_schedule',
    }),
    events: many(pages_blocks_schedule_events, {
      relationName: 'events',
    }),
  }),
);
export const relations_pages_blocks_stack = relations(
  pages_blocks_stack,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_stack._parentID],
      references: [pages.id],
      relationName: '_blocks_stack',
    }),
  }),
);
export const relations_pages_blocks_things_to_do = relations(
  pages_blocks_things_to_do,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_things_to_do._parentID],
      references: [pages.id],
      relationName: '_blocks_things-to-do',
    }),
  }),
);
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  'place-tagID': one(place_tag, {
    fields: [pages_rels['place-tagID']],
    references: [place_tag.id],
    relationName: 'place-tag',
  }),
  'things-to-do-categoryID': one(things_to_do_category, {
    fields: [pages_rels['things-to-do-categoryID']],
    references: [things_to_do_category.id],
    relationName: 'things-to-do-category',
  }),
  'things-to-doID': one(things_to_do, {
    fields: [pages_rels['things-to-doID']],
    references: [things_to_do.id],
    relationName: 'things-to-do',
  }),
}));
export const relations_pages = relations(pages, ({ many }) => ({
  _blocks_accordion: many(pages_blocks_accordion, {
    relationName: '_blocks_accordion',
  }),
  _blocks_card: many(pages_blocks_card, {
    relationName: '_blocks_card',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_place: many(pages_blocks_place, {
    relationName: '_blocks_place',
  }),
  _blocks_registry: many(pages_blocks_registry, {
    relationName: '_blocks_registry',
  }),
  _blocks_schedule: many(pages_blocks_schedule, {
    relationName: '_blocks_schedule',
  }),
  _blocks_stack: many(pages_blocks_stack, {
    relationName: '_blocks_stack',
  }),
  '_blocks_things-to-do': many(pages_blocks_things_to_do, {
    relationName: '_blocks_things-to-do',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}));
export const relations__pages_v_blocks_accordion_items = relations(
  _pages_v_blocks_accordion_items,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_accordion, {
      fields: [_pages_v_blocks_accordion_items._parentID],
      references: [_pages_v_blocks_accordion.id],
      relationName: 'items',
    }),
  }),
);
export const relations__pages_v_blocks_accordion = relations(
  _pages_v_blocks_accordion,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_accordion._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_accordion',
    }),
    items: many(_pages_v_blocks_accordion_items, {
      relationName: 'items',
    }),
  }),
);
export const relations__pages_v_blocks_card = relations(
  _pages_v_blocks_card,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_card._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_card',
    }),
  }),
);
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
);
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
);
export const relations__pages_v_blocks_place = relations(
  _pages_v_blocks_place,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_place._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_place',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_place.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
);
export const relations__pages_v_blocks_registry = relations(
  _pages_v_blocks_registry,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_registry._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_registry',
    }),
  }),
);
export const relations__pages_v_blocks_schedule_events = relations(
  _pages_v_blocks_schedule_events,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_schedule, {
      fields: [_pages_v_blocks_schedule_events._parentID],
      references: [_pages_v_blocks_schedule.id],
      relationName: 'events',
    }),
  }),
);
export const relations__pages_v_blocks_schedule = relations(
  _pages_v_blocks_schedule,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_schedule._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_schedule',
    }),
    events: many(_pages_v_blocks_schedule_events, {
      relationName: 'events',
    }),
  }),
);
export const relations__pages_v_blocks_stack = relations(
  _pages_v_blocks_stack,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_stack._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_stack',
    }),
  }),
);
export const relations__pages_v_blocks_things_to_do = relations(
  _pages_v_blocks_things_to_do,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_things_to_do._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_things-to-do',
    }),
  }),
);
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  'place-tagID': one(place_tag, {
    fields: [_pages_v_rels['place-tagID']],
    references: [place_tag.id],
    relationName: 'place-tag',
  }),
  'things-to-do-categoryID': one(things_to_do_category, {
    fields: [_pages_v_rels['things-to-do-categoryID']],
    references: [things_to_do_category.id],
    relationName: 'things-to-do-category',
  }),
  'things-to-doID': one(things_to_do, {
    fields: [_pages_v_rels['things-to-doID']],
    references: [things_to_do.id],
    relationName: 'things-to-do',
  }),
}));
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  _blocks_accordion: many(_pages_v_blocks_accordion, {
    relationName: '_blocks_accordion',
  }),
  _blocks_card: many(_pages_v_blocks_card, {
    relationName: '_blocks_card',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_place: many(_pages_v_blocks_place, {
    relationName: '_blocks_place',
  }),
  _blocks_registry: many(_pages_v_blocks_registry, {
    relationName: '_blocks_registry',
  }),
  _blocks_schedule: many(_pages_v_blocks_schedule, {
    relationName: '_blocks_schedule',
  }),
  _blocks_stack: many(_pages_v_blocks_stack, {
    relationName: '_blocks_stack',
  }),
  '_blocks_things-to-do': many(_pages_v_blocks_things_to_do, {
    relationName: '_blocks_things-to-do',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}));
export const relations_place_tag = relations(place_tag, () => ({}));
export const relations_registry_category = relations(
  registry_category,
  () => ({}),
);
export const relations_registry_item_rels = relations(
  registry_item_rels,
  ({ one }) => ({
    parent: one(registry_item, {
      fields: [registry_item_rels.parent],
      references: [registry_item.id],
      relationName: '_rels',
    }),
    'registry-categoryID': one(registry_category, {
      fields: [registry_item_rels['registry-categoryID']],
      references: [registry_category.id],
      relationName: 'registry-category',
    }),
  }),
);
export const relations_registry_item = relations(
  registry_item,
  ({ one, many }) => ({
    store: one(registry_store, {
      fields: [registry_item.store],
      references: [registry_store.id],
      relationName: 'store',
    }),
    image: one(media, {
      fields: [registry_item.image],
      references: [media.id],
      relationName: 'image',
    }),
    _rels: many(registry_item_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations__registry_item_v_rels = relations(
  _registry_item_v_rels,
  ({ one }) => ({
    parent: one(_registry_item_v, {
      fields: [_registry_item_v_rels.parent],
      references: [_registry_item_v.id],
      relationName: '_rels',
    }),
    'registry-categoryID': one(registry_category, {
      fields: [_registry_item_v_rels['registry-categoryID']],
      references: [registry_category.id],
      relationName: 'registry-category',
    }),
  }),
);
export const relations__registry_item_v = relations(
  _registry_item_v,
  ({ one, many }) => ({
    parent: one(registry_item, {
      fields: [_registry_item_v.parent],
      references: [registry_item.id],
      relationName: 'parent',
    }),
    version_store: one(registry_store, {
      fields: [_registry_item_v.version_store],
      references: [registry_store.id],
      relationName: 'version_store',
    }),
    version_image: one(media, {
      fields: [_registry_item_v.version_image],
      references: [media.id],
      relationName: 'version_image',
    }),
    _rels: many(_registry_item_v_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_registry_purchase = relations(
  registry_purchase,
  ({ one }) => ({
    registryItem: one(registry_item, {
      fields: [registry_purchase.registryItem],
      references: [registry_item.id],
      relationName: 'registryItem',
    }),
  }),
);
export const relations_registry_store = relations(registry_store, () => ({}));
export const relations_things_to_do_rels = relations(
  things_to_do_rels,
  ({ one }) => ({
    parent: one(things_to_do, {
      fields: [things_to_do_rels.parent],
      references: [things_to_do.id],
      relationName: '_rels',
    }),
    'things-to-do-categoryID': one(things_to_do_category, {
      fields: [things_to_do_rels['things-to-do-categoryID']],
      references: [things_to_do_category.id],
      relationName: 'things-to-do-category',
    }),
  }),
);
export const relations_things_to_do = relations(
  things_to_do,
  ({ one, many }) => ({
    image: one(media, {
      fields: [things_to_do.image],
      references: [media.id],
      relationName: 'image',
    }),
    _rels: many(things_to_do_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_things_to_do_category = relations(
  things_to_do_category,
  () => ({}),
);
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    'place-tagID': one(place_tag, {
      fields: [payload_locked_documents_rels['place-tagID']],
      references: [place_tag.id],
      relationName: 'place-tag',
    }),
    'registry-categoryID': one(registry_category, {
      fields: [payload_locked_documents_rels['registry-categoryID']],
      references: [registry_category.id],
      relationName: 'registry-category',
    }),
    'registry-itemID': one(registry_item, {
      fields: [payload_locked_documents_rels['registry-itemID']],
      references: [registry_item.id],
      relationName: 'registry-item',
    }),
    'registry-purchaseID': one(registry_purchase, {
      fields: [payload_locked_documents_rels['registry-purchaseID']],
      references: [registry_purchase.id],
      relationName: 'registry-purchase',
    }),
    'registry-storeID': one(registry_store, {
      fields: [payload_locked_documents_rels['registry-storeID']],
      references: [registry_store.id],
      relationName: 'registry-store',
    }),
    'things-to-doID': one(things_to_do, {
      fields: [payload_locked_documents_rels['things-to-doID']],
      references: [things_to_do.id],
      relationName: 'things-to-do',
    }),
    'things-to-do-categoryID': one(things_to_do_category, {
      fields: [payload_locked_documents_rels['things-to-do-categoryID']],
      references: [things_to_do_category.id],
      relationName: 'things-to-do-category',
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: '_rels',
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size;
  enum_pages_blocks_stack_direction: typeof enum_pages_blocks_stack_direction;
  enum_pages_status: typeof enum_pages_status;
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size;
  enum__pages_v_blocks_stack_direction: typeof enum__pages_v_blocks_stack_direction;
  enum__pages_v_version_status: typeof enum__pages_v_version_status;
  enum_registry_item_status: typeof enum_registry_item_status;
  enum__registry_item_v_version_status: typeof enum__registry_item_v_version_status;
  enum_registry_purchase_purchased_at: typeof enum_registry_purchase_purchased_at;
  users: typeof users;
  media: typeof media;
  pages_blocks_accordion_items: typeof pages_blocks_accordion_items;
  pages_blocks_accordion: typeof pages_blocks_accordion;
  pages_blocks_card: typeof pages_blocks_card;
  pages_blocks_content_columns: typeof pages_blocks_content_columns;
  pages_blocks_content: typeof pages_blocks_content;
  pages_blocks_place: typeof pages_blocks_place;
  pages_blocks_registry: typeof pages_blocks_registry;
  pages_blocks_schedule_events: typeof pages_blocks_schedule_events;
  pages_blocks_schedule: typeof pages_blocks_schedule;
  pages_blocks_stack: typeof pages_blocks_stack;
  pages_blocks_things_to_do: typeof pages_blocks_things_to_do;
  pages: typeof pages;
  pages_rels: typeof pages_rels;
  _pages_v_blocks_accordion_items: typeof _pages_v_blocks_accordion_items;
  _pages_v_blocks_accordion: typeof _pages_v_blocks_accordion;
  _pages_v_blocks_card: typeof _pages_v_blocks_card;
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns;
  _pages_v_blocks_content: typeof _pages_v_blocks_content;
  _pages_v_blocks_place: typeof _pages_v_blocks_place;
  _pages_v_blocks_registry: typeof _pages_v_blocks_registry;
  _pages_v_blocks_schedule_events: typeof _pages_v_blocks_schedule_events;
  _pages_v_blocks_schedule: typeof _pages_v_blocks_schedule;
  _pages_v_blocks_stack: typeof _pages_v_blocks_stack;
  _pages_v_blocks_things_to_do: typeof _pages_v_blocks_things_to_do;
  _pages_v: typeof _pages_v;
  _pages_v_rels: typeof _pages_v_rels;
  place_tag: typeof place_tag;
  registry_category: typeof registry_category;
  registry_item: typeof registry_item;
  registry_item_rels: typeof registry_item_rels;
  _registry_item_v: typeof _registry_item_v;
  _registry_item_v_rels: typeof _registry_item_v_rels;
  registry_purchase: typeof registry_purchase;
  registry_store: typeof registry_store;
  things_to_do: typeof things_to_do;
  things_to_do_rels: typeof things_to_do_rels;
  things_to_do_category: typeof things_to_do_category;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_pages_blocks_accordion_items: typeof relations_pages_blocks_accordion_items;
  relations_pages_blocks_accordion: typeof relations_pages_blocks_accordion;
  relations_pages_blocks_card: typeof relations_pages_blocks_card;
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns;
  relations_pages_blocks_content: typeof relations_pages_blocks_content;
  relations_pages_blocks_place: typeof relations_pages_blocks_place;
  relations_pages_blocks_registry: typeof relations_pages_blocks_registry;
  relations_pages_blocks_schedule_events: typeof relations_pages_blocks_schedule_events;
  relations_pages_blocks_schedule: typeof relations_pages_blocks_schedule;
  relations_pages_blocks_stack: typeof relations_pages_blocks_stack;
  relations_pages_blocks_things_to_do: typeof relations_pages_blocks_things_to_do;
  relations_pages_rels: typeof relations_pages_rels;
  relations_pages: typeof relations_pages;
  relations__pages_v_blocks_accordion_items: typeof relations__pages_v_blocks_accordion_items;
  relations__pages_v_blocks_accordion: typeof relations__pages_v_blocks_accordion;
  relations__pages_v_blocks_card: typeof relations__pages_v_blocks_card;
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns;
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content;
  relations__pages_v_blocks_place: typeof relations__pages_v_blocks_place;
  relations__pages_v_blocks_registry: typeof relations__pages_v_blocks_registry;
  relations__pages_v_blocks_schedule_events: typeof relations__pages_v_blocks_schedule_events;
  relations__pages_v_blocks_schedule: typeof relations__pages_v_blocks_schedule;
  relations__pages_v_blocks_stack: typeof relations__pages_v_blocks_stack;
  relations__pages_v_blocks_things_to_do: typeof relations__pages_v_blocks_things_to_do;
  relations__pages_v_rels: typeof relations__pages_v_rels;
  relations__pages_v: typeof relations__pages_v;
  relations_place_tag: typeof relations_place_tag;
  relations_registry_category: typeof relations_registry_category;
  relations_registry_item_rels: typeof relations_registry_item_rels;
  relations_registry_item: typeof relations_registry_item;
  relations__registry_item_v_rels: typeof relations__registry_item_v_rels;
  relations__registry_item_v: typeof relations__registry_item_v;
  relations_registry_purchase: typeof relations_registry_purchase;
  relations_registry_store: typeof relations_registry_store;
  relations_things_to_do_rels: typeof relations_things_to_do_rels;
  relations_things_to_do: typeof relations_things_to_do;
  relations_things_to_do_category: typeof relations_things_to_do_category;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module '@payloadcms/db-vercel-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
